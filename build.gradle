buildscript {
    ext {
        artifactoryContextUrl = "https://artifactory.corp.alleninstitute.org/artifactory"
    }
    repositories {
        mavenLocal()
        maven {
            url "${artifactoryContextUrl}/maven-virtual"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1")
        classpath("org.alleninstitute.aics:gradle-plugins:2.0.1")
    }
}

plugins {
    id "com.dorongold.task-tree" version "1.3.1"
    id "com.moowork.node" version "1.2.0"
}

apply plugin: "maven-publish"
apply plugin: "maven-publish-auth"
apply plugin: "org.alleninstitute.docker-publish"

node {
    version = "10.15.0"
    npmVersion = "6.5.0"
    download = true
    nodeModulesDir = file("${project.projectDir}")
}

project.version = "0.1.19"
project.group = "org.alleninstitute.aics"

ext {
    env = System.getenv("DEPLOYMENT_ENV") ?: "dev"
    npmBin = "${projectDir}/node_modules/.bin"

    // Repo settings
    artifactoryBaseUrl = "https://artifactory.corp.alleninstitute.org/artifactory"

    // TGZ Publishing
    distParentDir = file("$projectDir/dist")
    artifactVersion = dockerPublish.branchName != "master" ? "${dockerPublish.branchName.tokenize("/").join("-")}" : project.version
    artifactName = "${project.name}-${ext.artifactVersion}.tgz"
}

wrapper {
    gradleVersion "5.1"
    distributionType Wrapper.DistributionType.BIN
}

task lint(type: NodeTask) {
    dependsOn npmInstall

    script =  file("${npmBin}/tslint")
    FileTree tsFiles = fileTree(dir: "src", includes: ["**/*.ts", "**/*.tsx"])
    args = ["-c", "tslint.json"] + tsFiles.asList()
}

task start(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/webpack-dev-server")
    args = ["--config", "./webpack/webpack.config.js", "--env.env", env]
}

task test(type: NodeTask) {
    dependsOn npmInstall

    environment = [TS_NODE_PROJECT: "tsconfig.commonjs.json", NODE_ENV: "production"]
    script = file("${npmBin}/mocha")
    args = ["--opts", "mocha.opts", "src/**/test/*.{ts,tsx}"]
}

task typeCheck(type: NodeTask) {
    dependsOn npmInstall

    script = file("${npmBin}/tsc")
    args = "-p tsconfig.json --noEmit".tokenize()
}

///////////////////////////
// Build and publish
//////////////////////////

task bundle(type: NodeTask) {
    dependsOn npmInstall
    script = file("${npmBin}/webpack")
    args = ["--config", "./webpack/webpack.config.js", "--env.env", env]
}

dockerBuild {
    dependsOn bundle
}

dockerPublish {
    applicationVersion = project.version
    dockerImageVersion = "1.0.0"
    dockerfilePath = "./Docker/Dockerfile"
}

/// Publishing
task packageForPublish(type: Tar) {
    dependsOn bundle

    from distParentDir
    destinationDir file("${projectDir}")
    archiveName "$artifactName"
    compression Compression.GZIP
}

task artifactClean(type: Delete) {
    delete "$artifactName"
}

task localPublish {
    description "Create development module and publish to local cache"
    group "AICS Publishing"
    dependsOn packageForPublish, "publishMvnModulePublicationToMavenLocal"
}

task snapshotPublish {
    description "Create production module and publish to snapshot repo in artifactory"
    group "AICS Publishing"
    dependsOn packageForPublish, "publishMvnModulePublicationToSnapshotsRepoRepository"
}

publishing {
    publications {
        mvnModule(MavenPublication) {
            version artifactVersion
            artifact packageForPublish
        }
    }

    repositories {
        maven {
            name = "snapshotsRepo"
            url "${artifactoryBaseUrl}/maven-snapshot-local"
        }
    }
}

task snapshotPublishTarGzAndDockerImage {
    description "Publish snapshot docker image and *.tgz to artifactory"
    group "AICS Publishing"

    dependsOn dockerPush, snapshotPublish
}

task dockerCleanAndArtifactClean {
    description "Remove docker image and tgz artifact"
    group "AICS Publishing"

    dependsOn dockerClean, artifactClean
}